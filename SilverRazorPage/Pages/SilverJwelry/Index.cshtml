@page
@model SilverRazorPage.Pages.SilverJwelry.IndexModel

@{
    ViewData["Title"] = "Index";
}

<h1>Silver Jewelry</h1>

@{
    var role = HttpContext.Session.GetString("role");
}

<div class="d-flex justify-content-between mb-3">
    @if (!string.IsNullOrEmpty(role) && role.Equals("Administrator", StringComparison.OrdinalIgnoreCase))
    {
        <a asp-page="Create" class="btn btn-primary">Create New</a>
    }

    <form method="get" class="form-inline" id="searchForm">
        <input type="text" name="searchTerm" id="searchTerm" placeholder="Search by Name or Weight" class="form-control mr-2" />
        <button type="button" class="btn btn-secondary" onclick="performSearch()">Search</button>
    </form>
</div>

<table class="table">
    <thead>
        <tr>
            <th>@Html.DisplayNameFor(model => model.SilverJewelry[0].SilverJewelryId)</th>
            <th>@Html.DisplayNameFor(model => model.SilverJewelry[0].SilverJewelryName)</th>
            <th>@Html.DisplayNameFor(model => model.SilverJewelry[0].SilverJewelryDescription)</th>
            <th>@Html.DisplayNameFor(model => model.SilverJewelry[0].MetalWeight)</th>
            <th>@Html.DisplayNameFor(model => model.SilverJewelry[0].Price)</th>
            <th>@Html.DisplayNameFor(model => model.SilverJewelry[0].ProductionYear)</th>
            <th>@Html.DisplayNameFor(model => model.SilverJewelry[0].CreatedDate)</th>
            <th>@Html.DisplayNameFor(model => model.SilverJewelry[0].AccountId)</th>
            <th>Category Name</th>
            <th></th>
        </tr>
    </thead>
    <tbody>
        @{
            var categoryDictionary = new Dictionary<string, string>();
            foreach (var category in Model.Categories)
            {
                categoryDictionary[category.CategoryId.ToString()] = category.CategoryName;
            }
        }

        @foreach (var item in Model.SilverJewelry)
        {
            <tr>
                <td>@Html.DisplayFor(modelItem => item.SilverJewelryId)</td>
                <td>@Html.DisplayFor(modelItem => item.SilverJewelryName)</td>
                <td>@Html.DisplayFor(modelItem => item.SilverJewelryDescription)</td>
                <td>@Html.DisplayFor(modelItem => item.MetalWeight)</td>
                <td>@Html.DisplayFor(modelItem => item.Price)</td>
                <td>@Html.DisplayFor(modelItem => item.ProductionYear)</td>
                <td>@Html.DisplayFor(modelItem => item.CreatedDate)</td>
                <td>@Html.DisplayFor(modelItem => item.AccountId)</td>
                <td>
                    @if (categoryDictionary.TryGetValue(item.CategoryId.ToString(), out var categoryName))
                    {
                        @categoryName
                    }
                    else
                    {
                        <span>Not Found</span>
                    }
                </td>

                @if (!string.IsNullOrEmpty(role) && role.Equals("Administrator", StringComparison.OrdinalIgnoreCase))
                {
                    <td>
                        <a asp-page="./Edit" asp-route-id="@item.SilverJewelryId">Edit</a> |
                        <a asp-page="./Details" asp-route-id="@item.SilverJewelryId">Details</a> |
                        <a asp-page="./Delete" asp-route-id="@item.SilverJewelryId">Delete</a>
                    </td>
                }
            </tr>
        }
    </tbody>
</table>

@section Scripts {
    <script>
        function performSearch() {
            const searchTerm = document.getElementById("searchTerm").value;
            if (searchTerm) {
                window.location.href = `?searchTerm=${searchTerm}`;
            }
        }
    </script>
}
